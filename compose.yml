# docker-compose.yml
services:
  php:
    build:
      context: ./php
      dockerfile: Dockerfile
    container_name: php_app
    volumes:
      - ./data/src:/var/www
    expose:
      - 9000
    depends_on:
      - sqlserver
    networks:
      - app-network

  nginx:
    image: nginx:alpine
    container_name: nginx_web
    ports:
      - "8080:80"
    volumes:
      - ./data/src:/var/www
      - ./data/nginx/default.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - php
    networks:
      - app-network

  sqlserver:
    image: mcr.microsoft.com/mssql/server:2019-latest
    container_name: sql_server
    environment:
      SA_PASSWORD: "TuPassword123!"
      ACCEPT_EULA: "Y"
    volumes:
      - ./data/sqlserver/sql_data:/var/opt/mssql
      - ./data/sqlserver/backups:/var/opt/mssql/backups  # carpeta para los backups
    ports:
      - "1433:1433"
    networks:
      - app-network

  backup_cron:
    image: alpine:latest
    container_name: sql_backup_cron
    volumes:
      - ./data/sqlserver/backups/backup_sqlserver.sh:/usr/local/bin/backup_sqlserver.sh
      - ./data/sqlserver/backups:/backups
    depends_on:
      - sqlserver
    entrypoint: /bin/sh -c "
      apk add --no-cache bash curl msodbcsql17 unixodbc &&
      chmod +x /usr/local/bin/backup_sqlserver.sh &&
      echo '0 2 * * * /usr/local/bin/backup_sqlserver.sh >> /var/log/backup.log 2>&1' | crontab - &&
      crond -f"
    networks:
      - app-network

networks:
  app-network:
    driver: bridge
